@page
@using Gadevang_Tennis_Klub.Interfaces.Models
@model Gadevang_Tennis_Klub.Pages.CourtBookings.CourtBookingModel
@functions
{
    public async Task<string> GetHoverTitleAsync(ICourt court, DateTime date, int timeSlot, bool isAvailable, bool isBooked)
    {
        return !isAvailable ? "Kan ikke bookes" : (isBooked ? await GetIsBookedStringAsync(court, date, timeSlot) : GetIsAvailableString(court, timeSlot));
    }

    private async Task<string> GetIsBookedStringAsync(ICourt court, DateTime date, int timeSlot)
    {
        var lookupKey = (court.ID, DateOnly.FromDateTime(date), timeSlot);
        if (!Model.CurrentBookingsDict.TryGetValue(lookupKey, out ICourtBooking? courtBooking)) // return early if the booking could not be found.
            return "";

        // Check if it's a team booking
        if (courtBooking.Team_ID is int bookingTeamID)
        {
            ITeam? team = await Model.TeamDB.GetTeamByIDAsync(bookingTeamID);
            return $"Holdtræning: {team?.Name}";
        }

        // Check if it's a member booking
        if (courtBooking.Member_ID is int bookingMemberID)
        {
            if (int.TryParse(HttpContext.Session.GetString("User")?.Split('|')[0], out int memberID))
            {
                // Get all the participants, but exclude the currently logged in user.
                List<IMember> participants = courtBooking.Participants.Where(p => p.Id != memberID).ToList();

                // Participants list.
                string participantNames = participants.Count == 0 ? "boldmaskinen" : $"\n{string.Join("\n", participants.Select(p => p.Name))}";

                if (bookingMemberID == memberID) // If the member is organisator
                {
                    return $"Din booking: Bane {court.ID} {court.Type} kl. {timeSlot + Model.HourToBeginFrom}:00" +
                           $"\nBooket med: {participantNames}";
                }
                else if (courtBooking.Participants.Any(p => p.Id == memberID)) // If the member is a participant
                {
                    string organizerName = (await Model.MemberDB.GetMemberByIDAsync(bookingMemberID)).Name;
                    return $"{organizerName} har booket banen med dig:" +
                           $"\nBane {court.ID} {court.Type} kl. {timeSlot + Model.HourToBeginFrom}:00" +
                           $"\nBooket med: {participantNames}";
                }
            }
            return "Medlemsbooking";
        }

        // Check if it's an event booking
        if (courtBooking.Event_ID is int bookingEventID)
        {
            IEvent? ev = await Model.EventDB.GetEventByIDAsync(bookingEventID);
            return $"Begivenhed: {ev?.Title}";
        }

        return "";
    }
    private string GetIsAvailableString(ICourt court, int timeSlot)
    {
        return $"Bane {court.ID} {court.Type} kl. {timeSlot + Model.HourToBeginFrom}:00. Ledig: klik for at booke";
    }

    public string GetIsBookedIcon(ICourt court, DateTime date, int timeSlot)
    {
        var lookupKey = (court.ID, DateOnly.FromDateTime(date), timeSlot);
        if (!Model.CurrentBookingsDict.TryGetValue(lookupKey, out ICourtBooking? courtBooking)) // return early if the booking could not be found.
            return "";

        if (courtBooking.Team_ID is int bookingTeamID)
        {
            return $"fa-solid fa-clock";
        }
        if (courtBooking.Member_ID is int bookingMemberID)
        {
            return "fa-solid fa-user";
        }
        if (courtBooking.Event_ID is int bookingEventID)
        {
            return $"fa-solid fa-calendar";
        }

        return "";
    }
}
@{
    ViewData["Title"] = "CourtBooking";

    string _red = "red";
    string _green = "#87d49a";
    string _gray = "gray";
    string _orange = "#fabe6b";
}

<style>
    .btn-group {
    display: flex;
    flex-wrap: wrap;
    justify-content: center; /* Horizontal centering */
    align-items: center; /* Vertical centering */
    }

    .booking-btn {
    width: 20px;
    height: 20px;
    border: 1px solid #eeeeee;
    border-radius: 5px; /* 👈 This adds rounded corners */
    /* These 3 makes sure any icons in the buttons stays in the middle */
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .court-btn {
    width: 20px;
    height: 20px;
    border: none;
    background: none;
    pointer-events: none; /* Prevent any interactions (clicking) */
    }

    td {
    padding: 0px !important; /* The padding inside each column in the body rows */
    }

    .custom-date-text {
    font-size: 14px;
    text-align: center;
    }

    .disabled-delete-button {
    pointer-events: none; /* prevents clicks */
    opacity: 0.6;
    }
</style>


<!-- Popup messages to show when successfully booking or removing bookings -->
@{
    if (!string.IsNullOrEmpty(@Model.MessageSuccess))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"><span aria-hidden="true"></span></button>
            @Model.MessageSuccess
        </div>
    }
    if (!string.IsNullOrEmpty(@Model.MessageDanger))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"><span aria-hidden="true"></span></button>
            @Model.MessageDanger
        </div>
    }
}



<h1 class="text-center">Banebooking</h1>

<br />

<!-- Section for choosing area & precise dates -->
<div class="card">
    <div class="card-body">
        <div class="d-flex justify-content-between">
            <!-- Column for choosing area -->
            <div class="col-auto">
                <h5>OMRÅDE:</h5>
                <form method="post" asp-page-handler="NewAreaChosen">
                    <div class="form-group">
                        <select asp-for="SelectedArea" asp-items="@Model.AreaSelectList" class="form-select" onchange="this.form.submit()"></select>
                        <!-- Preserve the selected date -->
                        <input type="hidden" name="SelectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                    </div>
                </form>
            </div>
            <!-- Column for choosing date -->
            <div class="col-auto text-end">
                <h5>VÆLG/ÆNDRE DATO:</h5>
                <div class="d-flex align-items-center">

                    <!-- Button: Previous -->
                    <form method="post" asp-page-handler="Previous" class="p-1 d-inline-block">
                        <button type="submit" class="btn" style="background-color: #467191; color: white;">
                            <i class="fa fa-arrow-left"></i>
                        </button>
                        <input type="hidden" name="SelectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                        <input type="hidden" asp-for="SelectedArea" />
                    </form>

                    <!-- Datepicker -->
                    <form method="post" asp-page-handler="NewDateChosen" class="p-1 d-inline-block">
                        <div>
                            <div class="input-group">
                                <input type="date" asp-for="SelectedDate" class="form-control" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" onchange="this.form.submit()">
                                <input type="hidden" asp-for="SelectedArea" />
                            </div>
                        </div>
                    </form>

                    <!-- Button: Today -->
                    <form method="post" asp-page-handler="Today" class="p-1 d-inline-block">
                        <button type="submit" class="btn" style="background-color: #467191; color: white;">I dag</button>
                        <input type="hidden" name="SelectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                        <input type="hidden" asp-for="SelectedArea" />
                    </form>

                    <!-- Button: Next -->
                    <form method="post" asp-page-handler="Next" class="p-1 d-inline-block">
                        <button type="submit" class="btn" style="background-color: #467191; color: white;">
                            <i class="fa fa-arrow-right"></i>
                        </button>
                        <input type="hidden" name="SelectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                        <input type="hidden" asp-for="SelectedArea" />
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<br />

<!-- Section for actual booking -->
<div class="card">
    <div class="card-body">

        @if (int.TryParse(HttpContext.Session.GetString("User")?.Split('|')[0], out int memberID))
        {
            <h5>Dine banebookinger: @(await Model.GetMyCurrentBookingsCountAsync(memberID))/@(Model.MaxBookings)</h5>
            <br />
        }

        <!-- Booking table -->
        <table class="table">
            <thead>
                <tr>
                    <th class ="custom-date-text">Kl.</th>
                    <!-- Display day of the week (with weekday name shown above the actual weekday date) -->
                    @foreach (DateTime weekDay in @Model.CurrentWeekDays)
                    {
                        <th class="custom-date-text" style="background-color: @(weekDay.Date == DateTime.Today ? "#fcdbae !important" : "")">
                            @weekDay.ToString("dddd") <br />
                            @weekDay.ToString("d. MMMM yyyy")
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <!-- A single empty column above the timeSlots -->
                    <td></td>
                    @foreach (DateTime weekDay in @Model.CurrentWeekDays) // For each day of the week.
                    {
                        <td style="text-align: center">
                            <div class="btn-group">
                                @foreach (ICourt court in @Model.CourtsDict[Model.CurrentArea]) // And for each court.
                                {
                                    <!-- Show court ID's -->
                                    <button class="court-btn">
                                        <span style="display: flex; justify-content:center; align-items:center;">
                                            @($"{court.ID} ")
                                        </span>
                                    </button>
                                }
                            </div>
                        </td>
                    }
                </tr>
                @for (int i = 0; i <= @Model.TimeSlots; i++) // For each hour/time slot, for example from 6:00 to 23:00.
                {
                    <tr>
                        <!-- Show the time slots -->
                        <td class="text-end" style="width: 40px">
                            @(i+Model.HourToBeginFrom):00
                        </td>
                        @foreach (DateTime weekDay in @Model.CurrentWeekDays) // For each day of the week.
                        {
                            <td>
                                <div class="btn-group">
                                    @foreach (ICourt courtSlot in Model.CourtsDict[Model.CurrentArea]) // And for each court.
                                    {
                                        bool isAvailable = Model.CheckIsAvailable(weekDay, i);
                                        bool isBooked = Model.CheckIsBooked(courtSlot, weekDay, i);
                                        bool isBookedByMe = false;
                                        if (isBooked) { isBookedByMe = Model.CheckIsBookedByMe(courtSlot, weekDay, i); }

                                        <form method="post" asp-page-handler="OpenBookCourtModal">
                                            <input type="hidden" name="courtID" value="@courtSlot.ID" />
                                            <input type="hidden" name="date" value="@weekDay" />
                                            <input type="hidden" name="timeSlot" value="@i" />
                                            <input type="hidden" name="isBooked" value="@isBookedByMe.ToString().ToLower()" />
                                            <input type="hidden" name="SelectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                                            <input type="hidden" asp-for="SelectedArea" />

                                            <!-- Create a button for each court at this timeSlot, with button color based on booking status -->
                                            <button type="submit"
                                            class="booking-btn"
                                            style="background-color: @(!isAvailable ? _gray : (isBooked ? (isBookedByMe ? _orange : _red) : _green));"
                                            disabled="@( (!isAvailable || (isBooked && !isBookedByMe)) ? "disabled" : null )"
                                            title="@await GetHoverTitleAsync(courtSlot, weekDay, i, isAvailable, isBooked)">
                                                @if (isAvailable && isBooked)
                                                {
                                                    <!-- Icon -->
                                                    <i class="@GetIsBookedIcon(courtSlot, weekDay, i)" style="color: #000000; opacity: 0.5; font-size: 15px;"></i>
                                                }
                                            </button>
                                        </form>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <div style="display: flex; align-items: center; gap: 1.5rem; flex-wrap: wrap;">

            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <button type="button" class="booking-btn" style="background-color: @_gray; width: 20px; height: 20px;" disabled></button>
                <span>Kan ikke bookes</span>
            </div>

            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <button type="button" class="booking-btn" style="background-color: @_green; width: 20px; height: 20px;" disabled></button>
                <span>Ledig</span>
            </div>

            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <button type="button" class="booking-btn" style="background-color: @_orange; width: 20px; height: 20px;" disabled>
                    <i class="fa-solid fa-user" style="font-size: 15px; color: #000000; opacity: 0.5;"></i>
                </button>
                <span>Dine bookinger</span>
            </div>

            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <button type="button" class="booking-btn" style="background-color: @_red; width: 20px; height: 20px;" disabled>
                    <i class="fa-solid fa-user" style="font-size: 15px; color: #000000; opacity: 0.5;"></i>
                </button>
                <span>Medlemsbooking</span>
            </div>

            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <button type="button" class="booking-btn" style="background-color: @_red; width: 20px; height: 20px;" disabled>
                    <i class="fa-solid fa-clock" style="font-size: 15px; color: #000000; opacity: 0.5;"></i>
                </button>
                <span>Holdtræning</span>
            </div>

            <div style="display: flex; align-items: center; gap: 0.5rem;">
                <button type="button" class="booking-btn" style="background-color: @_red; width: 20px; height: 20px;" disabled>
                    <i class="fa-solid fa-calendar" style="font-size: 15px; color: #000000; opacity: 0.5;"></i>
                </button>
                <span>Begivenhed</span>
            </div>

        </div>
    </div>
</div>

<!-- The modal (popup box) -->
<div class="modal" id="bookingConfirmModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post">

                @{
                    IMember organiser = null;
                    if (Model.CurrentDate.HasValue && Model.CurrentTimeSlot.HasValue)
                    {
                        organiser = await Model.GetOrganizer(Model.CurrentCourt, Model.CurrentDate.Value, Model.CurrentTimeSlot.Value);
                    }

                    int.TryParse(HttpContext.Session.GetString("User")?.Split('|')[0], out int userID);
                }

                <!-- Modal Header -->
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(Model.IsBooked ? "Din Booking" : "Bekræft Booking")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(@Model.MessageModalDanger))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"><span aria-hidden="true"></span></button>
                            @Model.MessageModalDanger
                        </div>
                    }

                    @if (Model.IsBooked)
                    {
                        <p>
                            @if (organiser != null && organiser.Id == userID) 
                            {
                                <p>Du har booket</p>
                            }
                            else 
                            {
                                <p>@organiser.Name har booket</p>
                            }
                            <strong>
                                bane @Model.CurrentCourt?.ID @Model.CurrentCourt?.Type
                            </strong><br />
                            kl. 
                            <strong>
                                @(Model.CurrentTimeSlot+Model.HourToBeginFrom):00
                            </strong>
                            d. 
                            <strong>
                                @Model.CurrentDate?.ToShortDateString()
                            </strong>
                        </p>
                    }
                    else
                    {
                        <p>
                            Du er i gang med at booke
                            <strong>
                                bane @Model.CurrentCourt?.ID @Model.CurrentCourt?.Type
                            </strong><br />
                            kl.
                            <strong>
                                @(Model.CurrentTimeSlot + Model.HourToBeginFrom):00
                            </strong>
                            d.
                            <strong>
                                @Model.CurrentDate?.ToShortDateString()
                            </strong>
                        </p>
                    }

                    @if (organiser != null && organiser.Id == userID)
                    {
                        @if (Model.ParticipantIDs != null && Model.ParticipantIDs.Count < 3)
                        {
                            <label for="memberId">Hvem ønsker du at booke banen med?</label>
                            <br />
                            <div class="d-flex align-items-center gap-2">
                                <select name="memberId" id="memberId" class="form-select" style="width: auto;">
                                    <option disabled selected value="">-- Vælg et medlem --</option>
                                    @foreach (IMember member in await Model.GetAllAvailableMembers())
                                    {
                                        int bookingCount = await Model.GetMyCurrentBookingsCountAsync(member.Id);
                                        bool isFullyBooked = bookingCount >= 4;

                                        <option value="@member.Id" disabled="@(isFullyBooked ? "disabled" : null)">
                                            @member.Name @(isFullyBooked ? "(Dette medlem har ikke flere banebookinger til rådighed)" : "")
                                        </option>
                                    }
                                </select>

                                <button type="submit" class="btn btn-success" asp-page-handler="AddMemberToBooking">
                                    Tilføj medlem <i class="fas fa-plus-circle"></i>
                                </button>
                            </div>
                        }
                    }

                    <br />

                    @if (Model.ParticipantIDs != null && Model.ParticipantIDs.Count > 0)
                    {
                        <p>Deltagere:</p>

                        <div class="d-flex justify-content-center">
                            <table class="table" style="width:80%">
                                <thead>
                                    <tr>
                                        <th>Navn</th>
                                        <th class="text-end">Handling</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (int participantID in Model.ParticipantIDs)
                                    {
                                        IMember member = await Model.MemberDB.GetMemberByIDAsync(participantID);
                                        <tr>
                                            <td class="ps-3">@member.Name</td>
                                            <td class="text-end">
                                                @if (organiser != null && organiser.Id == userID)
                                                {
                                                    <button type="submit" class="btn btn-danger btn-sm" asp-page-handler="RemoveMemberFromBooking" asp-route-memberId="@participantID">
                                                        Fjern <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                                else if (participantID == userID)
                                                {
                                                    <button type="submit" class="btn btn-danger btn-sm" asp-page-handler="RemoveMemberFromBooking" asp-route-memberId="@participantID">
                                                        Forlad booking <i class="fas fa-sign-out"></i>
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }

                    @if (organiser != null && organiser.Id == userID)
                    {
                        <br />

                        <div class="form-check mb-2">
                            <input asp-for="UseBallMachine" class="form-check-input" type="checkbox" />
                            <label asp-for="UseBallMachine" class="form-check-label">Jeg ønsker at booke med boldmaskinen</label>
                        </div>
                    }
                </div>

                <!-- Hidden fields to keep data saved -->
                <input type="hidden" name="courtID" value="@Model.CurrentCourt?.ID" />
                <input type="hidden" name="date" value="@Model.CurrentDate" />
                <input type="hidden" name="timeSlot" value="@Model.CurrentTimeSlot" />
                <input type="hidden" name="isBooked" value="@(Model.IsBooked ? "true" : "false")" />
                @foreach (int memberId in Model.ParticipantIDs ?? new List<int>())
                {
                    <input type="hidden" name="participantIDs" value="@memberId" />
                }
                <input type="hidden" name="SelectedDate" value="@Model.SelectedDate.ToString("yyyy-MM-dd")" />
                <input type="hidden" asp-for="SelectedArea" />

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tilbage</button>
                    @if (Model.IsBooked)
                    {
                        @if (organiser != null && organiser.Id == userID)
                        {
                            <button type="submit" class="btn btn-danger" asp-page-handler="RemoveCourtBooking">Slet booking</button>
                        }
                    }
                    else
                    {
                        <button type="submit" class="btn btn-success" asp-page-handler="BookCourt">Book bane</button>
                    }
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript function to help open the Modal (popup box) -->
@if (Model.CurrentCourt != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function ()
        {
            var myModal = new bootstrap.Modal(document.getElementById('bookingConfirmModal'));
            myModal.show();
        });
    </script>
}